name: "ShadowMap Security Scan"
description: "Generate a CycloneDX SBOM and scan it with Grype"
inputs:
  bom-file:
    description: "Filename for the generated CycloneDX SBOM"
    required: false
    default: "bom.json"
  report-file:
    description: "Optional JSON file to store Grype results"
    required: false
    default: ""
  fail-on:
    description: "Lowest severity level that should fail the scan"
    required: false
    default: "medium"
  enable-reachability-analysis:
    description: "Set to true to flag vulnerabilities without reachable call sites as unreachable"
    required: false
    default: "false"
  reachability-function-map:
    description: "Optional JSON file mapping CVE IDs to vulnerable functions"
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - uses: dtolnay/rust-toolchain@stable

    - name: Ensure cargo-cyclonedx is installed
      shell: bash
      run: |
        if ! cargo cyclonedx --version >/dev/null 2>&1; then
          cargo install cargo-cyclonedx --locked
        fi

    - name: Ensure grype is installed
      shell: bash
      run: |
        if ! command -v grype >/dev/null 2>&1; then
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo sh -s -- -b /usr/local/bin
        fi

    - name: Run security scan
      shell: bash
      run: |
        ARGS=("--fail-on" "${{ inputs.fail-on }}")
        if [[ "${{ inputs.enable-reachability-analysis }}" == "true" ]]; then
          ARGS+=("--enable-reachability-analysis" "--source-root" "$GITHUB_WORKSPACE")
          if [[ -n "${{ inputs.reachability-function-map }}" ]]; then
            ARGS+=("--function-map" "${{ inputs.reachability-function-map }}")
          fi
        fi
        ARGS+=("${{ inputs.bom-file }}")
        if [[ -n "${{ inputs.report-file }}" ]]; then
          ARGS+=("${{ inputs.report-file }}")
        fi
        ./scripts/security-scan.sh "${ARGS[@]}"
